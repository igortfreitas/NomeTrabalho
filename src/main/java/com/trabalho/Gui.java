package com.trabalho;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.net.URL;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
public class Gui extends JFrame {
    @Autowired
    NameService nameService;

    URL url = getClass().getResource("/imagens/ifescol.png");
    ImageIcon image;

    {
        assert url != null;
        image = new ImageIcon(url);
    }

    private JPanel panel;
    private JButton ajudaButton;
    private JButton removerNomeButton;
    private JButton adicionarNomeButton;
    private JScrollPane scroll;
    private JList<String> list1;
    private final DefaultListModel<String> dlm = new DefaultListModel<>();

    @Bean
    CommandLineRunner commandLineRunner() {

        list1.setModel(dlm);
        listar();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setIconImage(image.getImage());
        this.setTitle("Conversor de Nomes");
        this.setResizable(false);
        this.setSize(400, 500);
        this.setContentPane(panel);
        this.setVisible(true);

        adicionarNomeButton.addActionListener(e -> addNome());
        ajudaButton.addActionListener(e -> ajuda());
        removerNomeButton.addActionListener(e -> remNome());

        return null;
    }
    private void remNome() {
        if (dlm.size() != 0) {
                String nome = list1.getSelectedValue();
                for (Name name : nameService.getList()){
                    if ((name.nome).equalsIgnoreCase(nome)) {
                        nameService.delName(name);
                        dlm.remove(list1.getSelectedIndex());
                    }
            }
        }
    }

    private void addNome() {

        String input = (JOptionPane.showInputDialog("Digite um nome para ser convertido"));
        Pattern p = Pattern.compile("^[A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ ]+$");
        Matcher m = p.matcher(input);

        if (!m.find()) {
            JOptionPane.showMessageDialog(null, "Só são permitidas letras!!");
        } else {
            Name name = new Name(input);
            dlm.addElement(name.nome);
            nameService.addName(name);
        }
    }

    private void ajuda() {
        JOptionPane.showMessageDialog(null, """
                ⟡ Este programa converterá o nome digitado
                ⟡ Exemplo: "José da Silva" ficará "SILVA, José da"
                ⟡ Adicionar Nome: Adiciona um novo nome e faz a conversão
                ⟡ Selecione um nome cadastrado e após isso clique em Remover Nome para removê-lo
                ⟡ Os nomes digitados são salvos no Banco de Dados""", "Ajuda", JOptionPane.INFORMATION_MESSAGE);
    }
    private void listar(){
        for (Name name : nameService.getList()) dlm.addElement(name.nome);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, 0));
        panel.setAlignmentX(0.0f);
        panel.setAlignmentY(0.0f);
        panel.setFocusable(false);
        panel.setForeground(new Color(-12961222));
        panel.setOpaque(true);
        panel.setVisible(true);
        ajudaButton = new JButton();
        ajudaButton.setAlignmentY(0.0f);
        ajudaButton.setBackground(new Color(-12961222));
        ajudaButton.setBorderPainted(false);
        ajudaButton.setEnabled(true);
        ajudaButton.setFocusPainted(true);
        ajudaButton.setFocusable(false);
        Font ajudaButtonFont = this.$$$getFont$$$("MV Boli", Font.BOLD, 16, ajudaButton.getFont());
        if (ajudaButtonFont != null) ajudaButton.setFont(ajudaButtonFont);
        ajudaButton.setForeground(new Color(-5029922));
        ajudaButton.setHideActionText(false);
        ajudaButton.setIconTextGap(-1);
        ajudaButton.setText("Ajuda");
        panel.add(ajudaButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removerNomeButton = new JButton();
        removerNomeButton.setAlignmentY(0.0f);
        removerNomeButton.setBackground(new Color(-12961222));
        removerNomeButton.setBorderPainted(false);
        removerNomeButton.setContentAreaFilled(true);
        removerNomeButton.setFocusable(false);
        Font removerNomeButtonFont = this.$$$getFont$$$("MV Boli", Font.BOLD, 16, removerNomeButton.getFont());
        if (removerNomeButtonFont != null) removerNomeButton.setFont(removerNomeButtonFont);
        removerNomeButton.setForeground(new Color(-5029922));
        removerNomeButton.setIconTextGap(-1);
        removerNomeButton.setText("Remover Nome");
        removerNomeButton.setVerticalAlignment(0);
        panel.add(removerNomeButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        adicionarNomeButton = new JButton();
        adicionarNomeButton.setAlignmentY(0.0f);
        adicionarNomeButton.setBackground(new Color(-12961222));
        adicionarNomeButton.setBorderPainted(false);
        adicionarNomeButton.setFocusable(false);
        Font adicionarNomeButtonFont = this.$$$getFont$$$("MV Boli", Font.BOLD, 16, adicionarNomeButton.getFont());
        if (adicionarNomeButtonFont != null) adicionarNomeButton.setFont(adicionarNomeButtonFont);
        adicionarNomeButton.setForeground(new Color(-5029922));
        adicionarNomeButton.setIconTextGap(-1);
        adicionarNomeButton.setText("Adicionar Nome");
        panel.add(adicionarNomeButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        list1 = new JList();
        list1.setBackground(new Color(-10263709));
        list1.setFocusable(false);
        Font list1Font = this.$$$getFont$$$("Franklin Gothic Medium", Font.ITALIC, 16, list1.getFont());
        if (list1Font != null) list1.setFont(list1Font);
        list1.setForeground(new Color(-257));
        list1.setSelectionForeground(new Color(-12961222));
        panel.add(list1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}